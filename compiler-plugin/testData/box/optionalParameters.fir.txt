FILE: optionalParameters.kt
    package my.test

    @R|io/github/nomisrev/typedapi/Endpoint|(path = String(/api/users)) public final class UserSearchEndpoint : R|kotlin/Any|, R|io/github/nomisrev/typedapi/HttpRequestValue| {
        public constructor(api: R|io/github/nomisrev/typedapi/EndpointAPI|): R|my/test/UserSearchEndpoint| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String|by R|<local>/api|.R|io/github/nomisrev/typedapi/query|<R|kotlin/String|>()
            public get(): R|kotlin/String| {
                ^ this@R|my/test/UserSearchEndpoint|.D|my/test/UserSearchEndpoint.name|.R|SubstitutionOverride<kotlin/properties/ReadOnlyProperty.getValue: R|kotlin/String|>|(this@R|my/test/UserSearchEndpoint|, ::R|my/test/UserSearchEndpoint.name|)
            }

        public final val limit: R|kotlin/Int?|by R|<local>/api|.R|io/github/nomisrev/typedapi/query|<R|kotlin/Int?|>()
            public get(): R|kotlin/Int?| {
                ^ this@R|my/test/UserSearchEndpoint|.D|my/test/UserSearchEndpoint.limit|.R|SubstitutionOverride<kotlin/properties/ReadOnlyProperty.getValue: R|kotlin/Int?|>|(this@R|my/test/UserSearchEndpoint|, ::R|my/test/UserSearchEndpoint.limit|)
            }

        public final override fun query(block: R|(kotlin/Any?, io/github/nomisrev/typedapi/Input.Query<kotlin/Any?>) -> kotlin/Unit|): R|kotlin/Unit|

        public final override fun path(block: R|(kotlin/Any?, io/github/nomisrev/typedapi/Input.Path<kotlin/Any?>) -> kotlin/Unit|): R|kotlin/Unit|

        public final override fun path(): R|kotlin/String|

        public final override fun header(block: R|(kotlin/Any?, io/github/nomisrev/typedapi/Input.Header<kotlin/Any?>) -> kotlin/Unit|): R|kotlin/Unit|

        public final override fun body(block: R|(kotlin/Any?, io/github/nomisrev/typedapi/Input.Body<kotlin/Any?>) -> kotlin/Unit|): R|kotlin/Unit|

        public constructor(name: R|kotlin/String|, limit: R|kotlin/Int?|): R|my/test/UserSearchEndpoint| {
            this<R|my/test/UserSearchEndpoint|>(R|io/github/nomisrev/typedapi/MapEndpointAPI.MapEndpointAPI|(String(name).R|kotlin/to|(R|<local>/name|), String(limit).R|kotlin/to|(R|<local>/limit|)))
        }

    }
    public final fun box(): R|kotlin/String| {
        lval endpoint1: R|my/test/UserSearchEndpoint| = R|my/test/UserSearchEndpoint|(String(john), Null(null))
        lval map1: R|kotlin/collections/Map<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>| = R|kotlin/collections/buildMap|<R|kotlin/Any?|, R|io/github/nomisrev/typedapi/Input<kotlin/Any?>|>(<L> = buildMap@fun R|kotlin/collections/MutableMap<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|<local>/endpoint1|.R|my/test/UserSearchEndpoint.query|(<L> = query@fun <anonymous>(any: R|kotlin/Any?|, input: R|io/github/nomisrev/typedapi/Input.Query<kotlin/Any?>|): R|kotlin/Unit| <inline=NoInline>  {
                this@R|special/anonymous|.R|SubstitutionOverride<kotlin/collections/MutableMap.put: R|io/github/nomisrev/typedapi/Input<kotlin/Any?>?|>|(R|<local>/any|, R|<local>/input|)
            }
            )
        }
        )
        lval values1: R|kotlin/collections/Map<kotlin/String?, kotlin/Any?>| = R|<local>/map1|.R|SubstitutionOverride<kotlin/collections/Map.entries: R|kotlin/collections/Set<kotlin/collections/Map.Entry<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>>|>|.R|kotlin/collections/associate|<R|kotlin/collections/Map.Entry<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>|, R|kotlin/String?|, R|kotlin/Any?|>(<L> = associate@fun <anonymous>(<destruct>: R|kotlin/collections/Map.Entry<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>|): R|kotlin/Pair<kotlin/String?, kotlin/Any?>| <inline=Inline, kind=UNKNOWN>  {
            lval value: R|kotlin/Any?| = R|<local>/<destruct>|.R|kotlin/collections/component1|<R|kotlin/Any?|, R|io/github/nomisrev/typedapi/Input<kotlin/Any?>|>()
            lval input: R|io/github/nomisrev/typedapi/Input<kotlin/Any?>| = R|<local>/<destruct>|.R|kotlin/collections/component2|<R|kotlin/Any?|, R|io/github/nomisrev/typedapi/Input<kotlin/Any?>|>()
            ^  {
                R|<local>/input|.R|SubstitutionOverride<io/github/nomisrev/typedapi/Input.name: R|kotlin/String?|>|().R|kotlin/to|<R|kotlin/String?|, R|kotlin/Any?|>(R|<local>/value|)
            }

        }
        )
        when () {
            !=(R|<local>/values1|.R|SubstitutionOverride<kotlin/collections/Map.get: R|kotlin/Any?|>|(String(name)), String(john)) ->  {
                ^box <strcat>(String(Expected name='john', got ), R|<local>/values1|.R|SubstitutionOverride<kotlin/collections/Map.get: R|kotlin/Any?|>|(String(name)))
            }
        }

        when () {
            ==(R|<local>/values1|.R|SubstitutionOverride<kotlin/collections/Map.get: R|kotlin/Any?|>|(String(limit)), String(null)) ->  {
                ^box <strcat>(String(Expected null, got ), R|<local>/values1|.R|SubstitutionOverride<kotlin/collections/Map.get: R|kotlin/Any?|>|(String(limit)))
            }
        }

        lval endpoint2: R|my/test/UserSearchEndpoint| = R|my/test/UserSearchEndpoint|(String(alice), Int(50))
        lval map2: R|kotlin/collections/Map<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>| = R|kotlin/collections/buildMap|<R|kotlin/Any?|, R|io/github/nomisrev/typedapi/Input<kotlin/Any?>|>(<L> = buildMap@fun R|kotlin/collections/MutableMap<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|<local>/endpoint2|.R|my/test/UserSearchEndpoint.query|(<L> = query@fun <anonymous>(any: R|kotlin/Any?|, input: R|io/github/nomisrev/typedapi/Input.Query<kotlin/Any?>|): R|kotlin/Unit| <inline=NoInline>  {
                this@R|special/anonymous|.R|SubstitutionOverride<kotlin/collections/MutableMap.put: R|io/github/nomisrev/typedapi/Input<kotlin/Any?>?|>|(R|<local>/any|, R|<local>/input|)
            }
            )
        }
        )
        lval values2: R|kotlin/collections/Map<kotlin/String?, kotlin/Any?>| = R|<local>/map2|.R|SubstitutionOverride<kotlin/collections/Map.entries: R|kotlin/collections/Set<kotlin/collections/Map.Entry<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>>|>|.R|kotlin/collections/associate|<R|kotlin/collections/Map.Entry<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>|, R|kotlin/String?|, R|kotlin/Any?|>(<L> = associate@fun <anonymous>(<destruct>: R|kotlin/collections/Map.Entry<kotlin/Any?, io/github/nomisrev/typedapi/Input<kotlin/Any?>>|): R|kotlin/Pair<kotlin/String?, kotlin/Any?>| <inline=Inline, kind=UNKNOWN>  {
            lval value: R|kotlin/Any?| = R|<local>/<destruct>|.R|kotlin/collections/component1|<R|kotlin/Any?|, R|io/github/nomisrev/typedapi/Input<kotlin/Any?>|>()
            lval input: R|io/github/nomisrev/typedapi/Input<kotlin/Any?>| = R|<local>/<destruct>|.R|kotlin/collections/component2|<R|kotlin/Any?|, R|io/github/nomisrev/typedapi/Input<kotlin/Any?>|>()
            ^  {
                R|<local>/input|.R|SubstitutionOverride<io/github/nomisrev/typedapi/Input.name: R|kotlin/String?|>|().R|kotlin/to|<R|kotlin/String?|, R|kotlin/Any?|>(R|<local>/value|)
            }

        }
        )
        when () {
            !=(R|<local>/values2|.R|SubstitutionOverride<kotlin/collections/Map.get: R|kotlin/Any?|>|(String(name)), String(alice)) ->  {
                ^box <strcat>(String(Expected name='alice', got ), R|<local>/values2|.R|SubstitutionOverride<kotlin/collections/Map.get: R|kotlin/Any?|>|(String(name)))
            }
        }

        when () {
            !=(R|<local>/values2|.R|SubstitutionOverride<kotlin/collections/Map.get: R|kotlin/Any?|>|(String(limit)), Int(50)) ->  {
                ^box <strcat>(String(Expected limit=50, got ), R|<local>/values2|.R|SubstitutionOverride<kotlin/collections/Map.get: R|kotlin/Any?|>|(String(limit)))
            }
        }

        ^box String(OK)
    }
FILE: __GENERATED DECLARATIONS__.kt
    package my.test
