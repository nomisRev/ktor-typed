

package io.github.nomisrev.typedapi.compiler.plugin.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link io.github.nomisrev.typedapi.compiler.plugin.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler-plugin/testData/diagnostics")
@TestDataPath("$PROJECT_ROOT")
public class JvmDiagnosticTestGenerated extends AbstractJvmDiagnosticTest {
  @Test
  public void testAllFilesPresentInDiagnostics() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-plugin/testData/diagnostics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Test
  @TestMetadata("duplicateParameterName.kt")
  public void testDuplicateParameterName() {
    runTest("compiler-plugin/testData/diagnostics/duplicateParameterName.kt");
  }

  @Test
  @TestMetadata("invalidParameterType.kt")
  public void testInvalidParameterType() {
    runTest("compiler-plugin/testData/diagnostics/invalidParameterType.kt");
  }

  @Test
  @TestMetadata("missingPathParameter.kt")
  public void testMissingPathParameter() {
    runTest("compiler-plugin/testData/diagnostics/missingPathParameter.kt");
  }

  @Test
  @TestMetadata("pathWithParams.kt")
  public void testPathWithParams() {
    runTest("compiler-plugin/testData/diagnostics/pathWithParams.kt");
  }
}
